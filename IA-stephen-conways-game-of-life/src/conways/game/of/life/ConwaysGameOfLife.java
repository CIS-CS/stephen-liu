package conways.game.of.life;

import java.awt.Color;
import java.awt.Point;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;

/**
 * The Graphical User Interface and entry point to the application.
 * @author ssyl55
 */
public class ConwaysGameOfLife extends javax.swing.JFrame
{

    /**
     * Creates new form IAProtypeGui
     */
    public ConwaysGameOfLife() 
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        rootPanel = new javax.swing.JPanel();
        surface = new conways.game.of.life.Surface();
        sidePanel = new javax.swing.JPanel();
        separator = new javax.swing.JSeparator();
        pauseButton = new javax.swing.JButton();
        speedLabel = new javax.swing.JLabel();
        sizeLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        colorComboBox = new javax.swing.JComboBox();
        stepLabel = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        newSimButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        sizeComboBox = new javax.swing.JComboBox();
        speedComboBox = new javax.swing.JComboBox();
        addRemoveLabel = new javax.swing.JLabel();
        addRemoveComboBox = new javax.swing.JComboBox();
        clearButton = new javax.swing.JButton();
        infoPanel = new conways.game.of.life.InfoPanel();
        menu = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        presetMenu = new javax.swing.JMenu();
        gliderPreset = new javax.swing.JMenuItem();
        pulsarPreset = new javax.swing.JMenuItem();
        pentadecathlonPreset = new javax.swing.JMenuItem();
        gunPreset = new javax.swing.JMenuItem();
        rPentominoPreset = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Conway's Game of Life");
        setPreferredSize(new java.awt.Dimension(960, 720));
        setSize(new java.awt.Dimension(960, 720));

        rootPanel.setToolTipText("");

        javax.swing.GroupLayout rootPanelLayout = new javax.swing.GroupLayout(rootPanel);
        rootPanel.setLayout(rootPanelLayout);
        rootPanelLayout.setHorizontalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        rootPanelLayout.setVerticalGroup(
            rootPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 424, Short.MAX_VALUE)
        );

        surface.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                surfaceMouseMoved(evt);
            }
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                surfaceMouseDragged(evt);
            }
        });
        surface.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                surfaceMousePressed(evt);
            }
        });

        javax.swing.GroupLayout surfaceLayout = new javax.swing.GroupLayout(surface);
        surface.setLayout(surfaceLayout);
        surfaceLayout.setHorizontalGroup(
            surfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 701, Short.MAX_VALUE)
        );
        surfaceLayout.setVerticalGroup(
            surfaceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        pauseButton.setText("Pause Simulation");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        speedLabel.setText("Simulation Speed: ");

        sizeLabel.setText("World Size: ");

        colorLabel.setText("Cell Colour:");

        colorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Black", "Blue", "Gray", "Green", "Red", "Pink" }));
        colorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorComboBoxActionPerformed(evt);
            }
        });

        stepLabel.setText("Step Through Simulation:");

        runButton.setText("Run Simulation");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        newSimButton.setText("New Simulation");
        newSimButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSimButtonActionPerformed(evt);
            }
        });

        backButton.setText("<<");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        forwardButton.setText(">>");
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        sizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "40x40", "50x50", "100x100", "200x200" }));
        sizeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeComboBoxActionPerformed(evt);
            }
        });

        speedComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1x", "0.25", "0.5x", "2x", "5x" }));
        speedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedComboBoxActionPerformed(evt);
            }
        });

        addRemoveLabel.setText("Add/Remove Cells:");

        addRemoveComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Add", "Remove" }));
        addRemoveComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRemoveComboBoxActionPerformed(evt);
            }
        });

        clearButton.setText("Clear World");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sidePanelLayout = new javax.swing.GroupLayout(sidePanel);
        sidePanel.setLayout(sidePanelLayout);
        sidePanelLayout.setHorizontalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(separator, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newSimButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pauseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addGap(130, 130, 130)
                        .addComponent(speedComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(runButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(1, 1, 1))
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sidePanelLayout.createSequentialGroup()
                        .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(speedLabel)
                            .addComponent(stepLabel))
                        .addGap(6, 6, 6))
                    .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sidePanelLayout.createSequentialGroup()
                            .addComponent(addRemoveLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(addRemoveComboBox, 0, 1, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sidePanelLayout.createSequentialGroup()
                            .addComponent(backButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(53, 53, 53)
                            .addComponent(forwardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sidePanelLayout.createSequentialGroup()
                            .addComponent(colorLabel)
                            .addGap(37, 37, 37)
                            .addComponent(colorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, sidePanelLayout.createSequentialGroup()
                            .addComponent(sizeLabel)
                            .addGap(24, 24, 24)
                            .addComponent(sizeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
            .addComponent(clearButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        sidePanelLayout.setVerticalGroup(
            sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sidePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(newSimButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speedLabel)
                    .addComponent(speedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sizeLabel)
                    .addComponent(sizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorLabel)
                    .addComponent(colorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stepLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(forwardButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(sidePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addRemoveLabel)
                    .addComponent(addRemoveComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        menu.add(fileMenu);

        presetMenu.setText("Presets");

        gliderPreset.setText("Glider");
        gliderPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gliderPresetActionPerformed(evt);
            }
        });
        presetMenu.add(gliderPreset);

        pulsarPreset.setText("Pulsar");
        pulsarPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pulsarPresetActionPerformed(evt);
            }
        });
        presetMenu.add(pulsarPreset);

        pentadecathlonPreset.setText("Pentadecathlon");
        pentadecathlonPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pentadecathlonPresetActionPerformed(evt);
            }
        });
        presetMenu.add(pentadecathlonPreset);

        gunPreset.setText("Gosper Glider Gun");
        gunPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gunPresetActionPerformed(evt);
            }
        });
        presetMenu.add(gunPreset);

        rPentominoPreset.setText("R-Pentomino");
        rPentominoPreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rPentominoPresetActionPerformed(evt);
            }
        });
        presetMenu.add(rPentominoPreset);

        menu.add(presetMenu);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(infoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(surface, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rootPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(surface, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(rootPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(infoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sidePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        int returnVal = fileChooser.showSaveDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            Persister persistor = new Persister(file.getAbsolutePath());
            persistor.saveWorld(surface.getWorld());
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            Persister persistor = new Persister(file.getAbsolutePath());
            World newWorld = persistor.loadWorld();
            int width = newWorld.getWidth();
            int num = checkSizeNumber(width);
            sizeComboBox.setSelectedIndex(num);
            surface.startLoadedWorld(newWorld);
        }
        Surface.resetInfo();
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        surface.setRunning(false);
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        surface.setRunning(true);
    }//GEN-LAST:event_runButtonActionPerformed

    private void newSimButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSimButtonActionPerformed
        surface.setRunning(false);
        surface.startNewSimulation(surface.getWorldWidth(), surface.getWorldHeight());
        Surface.resetInfo();
    }//GEN-LAST:event_newSimButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        surface.iterateWorldBackwards();
    }//GEN-LAST:event_backButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        surface.iterateWorldForwards();
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void colorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorComboBoxActionPerformed
        String newColor = colorComboBox.getSelectedItem().toString();
        Color color = Color.WHITE;
        
        switch (newColor) 
        {
            case "Black":
                color = Color.BLACK;
                break;
            case "Blue":
                color = Color.BLUE;
                break;
            case "Gray":
                color = Color.GRAY;
                break;
            case "Green":
                color = Color.GREEN;
                break;
            case "Red":
                color = Color.RED;
                break;
            case "Pink":
                color = Color.PINK;
                break;
        }
        
        surface.setCellColor(color);
    }//GEN-LAST:event_colorComboBoxActionPerformed

    private void speedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedComboBoxActionPerformed
        String inp = speedComboBox.getSelectedItem().toString();
        double speedup = Double.parseDouble(inp.substring(0, inp.length() - 1));
        surface.setSimSpeed(speedup);
    }//GEN-LAST:event_speedComboBoxActionPerformed

    private void sizeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeComboBoxActionPerformed
        String inp = sizeComboBox.getSelectedItem().toString();
        int size = Integer.parseInt(inp.split("x")[0]);
        int cellSize = 16;
        
        switch (size)
        {
            case 40:
                cellSize = 16;
                break;
            case 50:
                cellSize = 13;
                break;
            case 100:
                cellSize = 6;
                break;
            case 200:
                cellSize = 3;
                break;
        }
        
        surface.setCellSize(cellSize);
        surface.startNewSimulation(size, size);
        Surface.resetInfo();
    }//GEN-LAST:event_sizeComboBoxActionPerformed

    private void surfaceMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surfaceMousePressed
        Point clickPoint = evt.getLocationOnScreen();
        double x = clickPoint.getX();
        double y = clickPoint.getY();
        surface.toggleCell(x, y);
    }//GEN-LAST:event_surfaceMousePressed

    private void surfaceMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surfaceMouseDragged
        surfaceMouseMoved(evt);
    }//GEN-LAST:event_surfaceMouseDragged

    private void surfaceMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_surfaceMouseMoved
        if (SwingUtilities.isLeftMouseButton(evt))
        {
            surfaceMousePressed(evt);
        } 
    }//GEN-LAST:event_surfaceMouseMoved

    private void addRemoveComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRemoveComboBoxActionPerformed
        String inp = addRemoveComboBox.getSelectedItem().toString();
        
        if (inp.equals("Add"))
        {
            surface.setAddRemoveCell(true);
        }
        else if (inp.equals("Remove"))
        {
            surface.setAddRemoveCell(false);
        }
    }//GEN-LAST:event_addRemoveComboBoxActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        surface.startBlankWorld(surface.getWorldWidth(), surface.getWorldHeight());
        Surface.resetInfo();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void gliderPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gliderPresetActionPerformed
        openAndLoadFile("presets/glider.conway");
        InfoPanel.updatePreset("Glider");
    }//GEN-LAST:event_gliderPresetActionPerformed

    private void rPentominoPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rPentominoPresetActionPerformed
        openAndLoadFile("presets/rpentomino.conway");
        InfoPanel.updatePreset("R-Pentomino");
    }//GEN-LAST:event_rPentominoPresetActionPerformed

    private void pulsarPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pulsarPresetActionPerformed
        openAndLoadFile("presets/pulsar.conway");
        InfoPanel.updatePreset("Pulsar");
    }//GEN-LAST:event_pulsarPresetActionPerformed

    private void pentadecathlonPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pentadecathlonPresetActionPerformed
         openAndLoadFile("presets/pentadecathlon.conway");
        InfoPanel.updatePreset("Pentadecathlon");
    }//GEN-LAST:event_pentadecathlonPresetActionPerformed

    private void gunPresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gunPresetActionPerformed
        openAndLoadFile("presets/gun.conway");
        InfoPanel.updatePreset("Gosper Glider Gun");
    }//GEN-LAST:event_gunPresetActionPerformed

    /**
     * Loads and starts a new world from the file.
     * @param filename the path to the file to be loaded from.
     */
    private void openAndLoadFile(String filename)
    {
        Persister persistor = new Persister(filename);
        World newWorld = persistor.loadWorld();
        int width = newWorld.getWidth();
        int num = checkSizeNumber(width);
        sizeComboBox.setSelectedIndex(num);
        surface.startLoadedWorld(newWorld);
    }
    /**
     * Checks the width and returns the corresponding index number
     * in the sizeComboBox; used to get the item index to set the 
     * sizeComboBox to when new worlds.
     * @param width the width of the world to check.
     * @return the item index number.
     */
    private int checkSizeNumber(int width)
    {
        int num = 0;
        if (width == 40)
        {
            num = 0;
        }
        else if (width == 50)
        {
            num = 1;
        }
        else if (width == 100)
        {
            num = 2;
        }
        else if (width == 200)
        {
            num = 3;
        }
        
        return num;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConwaysGameOfLife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConwaysGameOfLife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConwaysGameOfLife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConwaysGameOfLife.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run() 
            {
                new ConwaysGameOfLife().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox addRemoveComboBox;
    private javax.swing.JLabel addRemoveLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JComboBox colorComboBox;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton forwardButton;
    private javax.swing.JMenuItem gliderPreset;
    private javax.swing.JMenuItem gunPreset;
    private conways.game.of.life.InfoPanel infoPanel;
    private javax.swing.JMenuBar menu;
    private javax.swing.JButton newSimButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton pauseButton;
    private javax.swing.JMenuItem pentadecathlonPreset;
    private javax.swing.JMenu presetMenu;
    private javax.swing.JMenuItem pulsarPreset;
    private javax.swing.JMenuItem rPentominoPreset;
    private javax.swing.JPanel rootPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JSeparator separator;
    private javax.swing.JPanel sidePanel;
    private javax.swing.JComboBox sizeComboBox;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JComboBox speedComboBox;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JLabel stepLabel;
    private conways.game.of.life.Surface surface;
    // End of variables declaration//GEN-END:variables
}